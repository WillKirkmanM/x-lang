WHITESPACE = _{ " " | "\t" | "\r" | "\n" | COMMENT }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

program = { SOI ~ statement* ~ EOI }
statement = { if_stmt | for_loop | while_loop | function_def | (var_decl | import | expr) ~ ";" }

function_def = { "fn" ~ identifier ~ "(" ~ params? ~ ")" ~ block }
params = { identifier ~ ("," ~ identifier)* }
block = { "{" ~ (statement* ~ block_expr?)? ~ "}" }
block_expr = { expr ~ ";"? }

import = { "import" ~ module ~ "::" ~ item }
module = { identifier }
item = { identifier }

var_decl = { "let" ~ identifier ~ "=" ~ expr }
if_stmt = { "if" ~ expr ~ block ~ ("else" ~ block)? }
for_loop = { "for" ~ identifier ~ "in" ~ expr ~ ".." ~ expr ~ block }
while_loop = { "while" ~ expr ~ block }

expr = { term ~ (operator ~ term)* }

primary = { function_call | number | identifier | anonymous_fn | string | array_literal | "(" ~ expr ~ ")" }
term = { primary ~ postfix* }
postfix = { "[" ~ expr ~ "]" }

anonymous_fn = { "|" ~ params? ~ "|" ~ block }
function_call = { identifier ~ "(" ~ args? ~ ")" }
args = { expr ~ ("," ~ expr)* }

array_literal = { "[" ~ (expr ~ ("," ~ expr)*)? ~ "]" }

operator = _{ eq_op | neq_op | le_op | ge_op | lt_op | gt_op | add_op | sub_op | mul_op | div_op | assign_op }
eq_op = { "==" }
neq_op = { "!=" }
le_op = { "<=" }
ge_op = { ">=" }
lt_op = { "<" }
gt_op = { ">" }
add_op = { "+" }
sub_op = { "-" }
mul_op = { "*" }
div_op = { "/" }
assign_op = { "=" }

number = @{ "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
string = { "\"" ~ inner_str ~ "\"" }
inner_str = { (interpolation | string_char)* }
interpolation = { "{" ~ identifier ~ "}" }
string_char = @{
    !("{" | "\"") ~ ANY
}

