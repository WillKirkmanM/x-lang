WHITESPACE = _{ " " | "\t" | "\r" | "\n" | COMMENT }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

program = { SOI ~ statement* ~ EOI }
statement = { struct_decl | if_stmt | for_loop | while_loop | function_def | return_stmt | (var_decl | import | expr) ~ ";" }

function_def = { "fn" ~ identifier ~ "(" ~ params? ~ ")" ~ block }
params = { identifier ~ ("," ~ identifier)* }
block = { "{" ~ (statement* ~ block_expr?)? ~ "}" }
block_expr = { expr ~ ";"? }

import = { "import" ~ (module_import | file_import) }
module_import = { module ~ "::" ~ item }
file_import = { string_path }
string_path = @{ "\"" ~ (!("\"" | "\\") ~ ANY)* ~ "\"" }
module = @{ identifier }
item = @{ identifier }

var_decl = { "let" ~ identifier ~ "=" ~ expr }
if_stmt = { "if" ~ expr ~ block ~ ("else" ~ block)? }
for_loop = { "for" ~ identifier ~ "in" ~ expr ~ ".." ~ expr ~ block }
while_loop = { "while" ~ expr ~ block }

expr = { term ~ (operator ~ term)* }

term = { 
    anonymous_fn | 
    prefix_op | 
    postfix_op |
    primary
}

primary = { 
    number | 
    function_call |
    struct_instantiate |
    identifier | 
    "(" ~ expr ~ ")" | 
    string | 
    array_literal
}

prefix_op = { neg_op ~ term | not_op ~ term | bit_not_op ~ term | pre_inc_op ~ term | pre_dec_op ~ term }
postfix_op = { primary ~ (post_inc_op | post_dec_op | postfix)+ }

postfix = { "[" ~ expr ~ "]" | "." ~ identifier }

neg_op = { "-" }
not_op = { "!" } 
bit_not_op = { "~" }
pre_inc_op = { "++" }
pre_dec_op = { "--" }
post_inc_op = { "++" }
post_dec_op = { "--" }

anonymous_fn = { "|" ~ params? ~ "|" ~ block }

function_call = { identifier ~ "(" ~ args? ~ ")" }
args = { expr ~ ("," ~ expr)* }

array_literal = { "[" ~ (expr ~ ("," ~ expr)*)? ~ "]" }

struct_decl = { "struct" ~ identifier ~ "{" ~ struct_fields? ~ "}" }
struct_fields = { identifier ~ ("," ~ identifier)* }

struct_instantiate = { identifier ~ "{" ~ struct_init_fields? ~ "}" }
struct_init_fields = { struct_init_field ~ ("," ~ struct_init_field)* }
struct_init_field = { identifier ~ ":" ~ expr }

return_stmt = { "return" ~ expr? ~ ";" }

operator = _{ or_op | and_op | eq_op | neq_op | le_op | ge_op | lt_op | gt_op | add_op | sub_op | mul_op | div_op | assign_op }
or_op = { "||" }
and_op = { "&&" }
eq_op = { "==" }
neq_op = { "!=" }
le_op = { "<=" }
ge_op = { ">=" }
lt_op = { "<" }
gt_op = { ">" }
add_op = { "+" }
sub_op = { "-" }
mul_op = { "*" }
div_op = { "/" }
assign_op = { "=" }

number = @{ "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
string = { "\"" ~ inner_str ~ "\"" }
inner_str = { (interpolation | string_char)* }
interpolation = { "{" ~ identifier ~ "}" }
string_char = @{
    !("{" | "\"") ~ ANY
}

